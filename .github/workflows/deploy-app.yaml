# name: Deployment Workflow

# on: 
#   push:
#     branches: [main]
#   pull_request:
#     branches: [main]
#   workflow_dispatch:
#   release:

# jobs:
#   build-and-deploy:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2

#       - name: Install Node
#         uses: actions/setup-node@v3
#         with:
#           node-version: '20'
#           cache: 'npm'

#       - name: Check Node version
#         run: node -v

#       - name: Install dependencies
#         run: npm install

#       - name: Start dev server
#         run: npm run dev &

#   build-code-server:
#     runs-on: ubuntu-latest
#     needs: build-and-deploy
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Install Node
#         uses: actions/setup-node@v3
#         with:
#           node-version: '20'
#           cache: 'npm'

#       - name: Check Node version
#         run: node -v

#       - name: Install dependencies
#         run: npm install

#       - name: Build code server
#         run: npm run build

#   # deploy-server:
#   #   runs-on: ubuntu-latest
#   #   needs: build-code-server
#   #   steps:
#   #     - name: Checkout code
#   #       uses: actions/checkout@v4

#   #     - name: Set up SSH
#   #       uses: webfactory/ssh-agent@v0.5.4
#   #       with:
#   #         ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

#   #     - name: Add server to known hosts
#   #       run: |
#   #         mkdir -p ~/.ssh
#   #         ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

#   #     - name: Deploy to server
#   #       run: |
#   #         ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
#   #           cd /path/to/your/app || exit
#   #           git pull origin main
#   #           npm install
#   #           npm run build
#   #           pm2 restart all
#   #         EOF

#   #     - name: Notify deployment success
#   #       run: echo "Deployment to server completed successfully!"

#   #     - name: Notify deployment failure
#   #       if: failure()
#   #       run: echo "Deployment to server failed!"

#   #     - name: Clean up
#   #       run: rm -rf ~/.ssh/known_hosts

#   #     - name: End of workflow
#   #       run: echo "Workflow completed."
# deploy-vercel:
#   runs-on: ubuntu-latest
#   needs: build-code-server
#   steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Install Vercel CLI
#       run: npm install -g vercel

#     - name: Deploy to Vercel
#       run: vercel --prod --token=${{ secrets.VERCEL_TOKEN }}
name: Deployment Workflow

on: 
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
  release:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Node
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Check Node version
        run: node -v

      - name: Install dependencies
        run: npm install

      - name: Start dev server
        run: npm run dev &

  build-code-server:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Node
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Check Node version
        run: node -v

      - name: Install dependencies
        run: npm install

      - name: Build code server
        run: npm run build

  deploy-vercel:   # 👈 এটা jobs এর নিচে রাখলাম
    runs-on: ubuntu-latest
    needs: build-code-server
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Deploy to Vercel
        run: vercel --prod --token=${{ secrets.VERCEL_TOKEN }}
